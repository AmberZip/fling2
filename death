local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer
Players.CharacterAutoLoads = true

local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local RootPart = Character:WaitForChild("HumanoidRootPart")
local Humanoid = Character:WaitForChild("Humanoid")

local flingEnabled = false
local BV = nil
local cleaningUp = false

-- UI toggle
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "FlingToggleGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

local toggleButton = Instance.new("TextButton")
toggleButton.Size = UDim2.new(0, 120, 0, 40)
toggleButton.Position = UDim2.new(0, 10, 1, -50)
toggleButton.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
toggleButton.TextColor3 = Color3.new(1, 1, 1)
toggleButton.Font = Enum.Font.SourceSansBold
toggleButton.TextSize = 20
toggleButton.Text = "Fling: OFF"
toggleButton.Parent = screenGui

toggleButton.MouseButton1Click:Connect(function()
	flingEnabled = not flingEnabled
	toggleButton.Text = "Fling: " .. (flingEnabled and "ON" or "OFF")
end)

-- Deletes all tools
local function removeAllTools()
	for _, item in pairs(Character:GetChildren()) do
		if item:IsA("Tool") then
			item:Destroy()
		end
	end
end

-- Clean up physics
local function cleanPhysics()
	for _, obj in ipairs(Character:GetDescendants()) do
		if obj:IsA("BodyMover") or obj:IsA("BodyVelocity") or obj:IsA("BodyPosition") then
			obj:Destroy()
		end
	end
end

-- Clamp character position to prevent physics bugs
local function clampPosition()
	local pos = RootPart.Position
	local clamped = Vector3.new(
		math.clamp(pos.X, -10000, 10000),
		math.max(pos.Y, -30),
		math.clamp(pos.Z, -10000, 10000)
	)
	if (clamped - pos).Magnitude > 1 then
		RootPart.CFrame = CFrame.new(clamped)
	end
end

-- Create fling velocity
local function applyBodyVelocity()
	if BV then BV:Destroy() end
	BV = Instance.new("BodyVelocity")
	BV.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
	BV.Velocity = RootPart.CFrame.LookVector * 9999
	BV.Name = "SafeFlingBV"
	BV.Parent = RootPart
end

-- Handle respawn
local function onCharacterAdded(char)
	cleaningUp = false
	Character = char
	RootPart = char:WaitForChild("HumanoidRootPart")
	Humanoid = char:WaitForChild("Humanoid")

	removeAllTools()
	applyBodyVelocity()

	Humanoid.Died:Connect(function()
		cleaningUp = true
		if BV then BV:Destroy() end
	end)
end

LocalPlayer.CharacterAdded:Connect(onCharacterAdded)

-- Target logic
local function getNearestTarget()
	local nearest = nil
	local nearestDist = math.huge
	for _, p in ipairs(Players:GetPlayers()) do
		if p ~= LocalPlayer and p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
			local targetRoot = p.Character.HumanoidRootPart
			if targetRoot.Position.Y <= 250 then
				local dist = (targetRoot.Position - RootPart.Position).Magnitude
				if dist < nearestDist then
					nearestDist = dist
					nearest = p
				end
			end
		end
	end
	return nearest
end

-- Main loop
RunService.Heartbeat:Connect(function()
	if not flingEnabled then return end
	if not Character or not RootPart or not Humanoid then return end
	if Humanoid.Health <= 0 or cleaningUp then return end

	removeAllTools()
	clampPosition()

	if not BV or not BV.Parent then
		applyBodyVelocity()
	end

	local target = getNearestTarget()
	if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
		local targetRoot = target.Character.HumanoidRootPart
		local offset = Vector3.new(
			math.random(-10, 10) * 0.05,
			math.random(0, 10) * 0.1,
			math.random(-10, 10) * 0.05
		)
		local newPos = targetRoot.Position + offset
		RootPart.CFrame = CFrame.new(newPos)
	end
end)
