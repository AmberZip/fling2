local Players     = game:GetService("Players")
local RunService  = game:GetService("RunService")
local StarterGui  = game:GetService("StarterGui")

local LocalPlayer       = Players.LocalPlayer
local Character         = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local RootPart          = Character:WaitForChild("HumanoidRootPart")
local flingEnabled      = false
local disableFlingTimer = 0
local safePosition      = Vector3.new(0, 50, 0)  -- Adjust safe respawn glide location

-- Create BodyVelocity
local BV = Instance.new("BodyVelocity")
BV.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
BV.Velocity = Vector3.zero
BV.Parent = RootPart

-- UI toggle
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "FlingToggleGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

local toggleButton = Instance.new("TextButton")
toggleButton.Size = UDim2.new(0, 120, 0, 40)
toggleButton.Position = UDim2.new(0, 10, 1, -50)
toggleButton.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
toggleButton.TextColor3 = Color3.new(1, 1, 1)
toggleButton.Font = Enum.Font.SourceSansBold
toggleButton.TextSize = 20
toggleButton.Text = "Fling: OFF"
toggleButton.Parent = screenGui

toggleButton.MouseButton1Click:Connect(function()
    flingEnabled = not flingEnabled
    toggleButton.Text = "Fling: " .. (flingEnabled and "ON" or "OFF")
end)

-- Check for Spectator tool
local function hasSpectatorTool(player)
    for _, container in ipairs({player.Backpack, player.Character or {}}) do
        for _, item in ipairs(container:GetChildren()) do
            if item:IsA("Tool") and item.Name == "Spectator" then
                return true
            end
        end
    end
    return false
end

-- Get nearest valid target (Y <= 250)
local function getNearestTarget()
    local nearestP, nearestDist = nil, math.huge
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer
        and player.Character
        and player.Character:FindFirstChild("HumanoidRootPart")
        and player.Character:FindFirstChild("Humanoid")
        and player.Character.Humanoid.Health > 0
        and not hasSpectatorTool(player) then

            local tr = player.Character.HumanoidRootPart
            if tr.Position.Y <= 67 then
                local dist = (tr.Position - RootPart.Position).Magnitude
                if dist < nearestDist then
                    nearestDist = dist
                    nearestP    = player
                end
            end
        end
    end
    return nearestP
end

-- Update tool reference
local function updateTool()
    for _, item in ipairs(Character:GetChildren()) do
        if item:IsA("Tool") then
            return item
        end
    end
    return nil
end

-- Activate equipped tool
local function activateTool(tool)
    if tool and tool.Parent == Character then
        pcall(tool.Activate, tool)
    end
end

-- Smoothly glide to safe position after respawn
local function glideToSafePosition()
    local bp = Instance.new("BodyPosition")
    bp.MaxForce = Vector3.new(1e5, 1e5, 1e5)
    bp.P = 1e4
    bp.D = 1e3
    bp.Position = safePosition
    bp.Parent = RootPart

    delay(2, function() bp:Destroy() end)
end

-- On character respawn
local function onCharacterAdded(char)
    Character = char
    RootPart  = char:WaitForChild("HumanoidRootPart")

    BV:Destroy()
    BV = Instance.new("BodyVelocity")
    BV.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
    BV.Velocity = Vector3.zero
    BV.Parent = RootPart

    disableFlingTimer = 3.5
    glideToSafePosition()
end

LocalPlayer.CharacterAdded:Connect(onCharacterAdded)

-- Main fling loop (single Heartbeat)
RunService.Heartbeat:Connect(function(dt)
    -- respawn cooldown
    if disableFlingTimer > 0 then
        disableFlingTimer = disableFlingTimer - dt
        return
    end

    -- if disabled, zero velocity
    if not flingEnabled then
        BV.Velocity = Vector3.zero
        return
    end

    -- Update/activate tool as fast as possible
    local tool = updateTool()
    activateTool(tool)

    -- find nearest target under Y=250
    local target = getNearestTarget()
    if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
        local tr = target.Character.HumanoidRootPart

        -- random offset to avoid perfect overlap
        local offset = Vector3.new(
            math.random(-5, 5) * 0.1,
            math.random(0, 5) * 0.1,
            math.random(-5, 5) * 0.1
        )
        local desired = tr.Position + offset
        local current = RootPart.Position

        local toTarget = desired - current
        local dist = toTarget.Magnitude
        local dir  = toTarget.Unit

        -- set high speed
        local speed = 777
        BV.Velocity = dir * speed

        -- if far, teleport closer aggressively
        if dist > 20 then
            local lerped = current:Lerp(desired, 0.5)  -- faster snap
            RootPart.CFrame = CFrame.new(lerped)
        end
    else
        BV.Velocity = Vector3.zero
    end
end)
