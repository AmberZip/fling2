local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local RootPart = Character:WaitForChild("HumanoidRootPart")

local flingEnabled = false
local disableFlingTimer = 0
local safePosition = Vector3.new(0, 50, 0)

-- Create BodyVelocity
local BV = Instance.new("BodyVelocity")
BV.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
BV.Velocity = Vector3.zero
BV.Parent = RootPart

-- UI toggle
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "FlingToggleGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

local toggleButton = Instance.new("TextButton")
toggleButton.Size = UDim2.new(0, 120, 0, 40)
toggleButton.Position = UDim2.new(0, 10, 1, -50)
toggleButton.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
toggleButton.TextColor3 = Color3.new(1, 1, 1)
toggleButton.Font = Enum.Font.SourceSansBold
toggleButton.TextSize = 20
toggleButton.Text = "Fling: OFF"
toggleButton.Parent = screenGui

toggleButton.MouseButton1Click:Connect(function()
	flingEnabled = not flingEnabled
	toggleButton.Text = "Fling: " .. (flingEnabled and "ON" or "OFF")
end)

local function hasSpectatorTool(player)
	local function check(container)
		for _, item in pairs(container:GetChildren()) do
			if item:IsA("Tool") and item.Name == "Spectator" then
				return true
			end
		end
		return false
	end
	return check(player.Backpack) or check(player.Character)
end

local function getNearestTarget()
	local nearestPlayer = nil
	local nearestDist = math.huge
	for _, player in pairs(Players:GetPlayers()) do
		if player ~= LocalPlayer
			and player.Character
			and player.Character:FindFirstChild("HumanoidRootPart")
			and player.Character:FindFirstChild("Humanoid")
			and player.Character.Humanoid.Health > 0
			and not hasSpectatorTool(player) then

			local pos = player.Character.HumanoidRootPart.Position
			if pos.Y < 15 or pos.Y > 250 or math.abs(pos.X) > 9999 or math.abs(pos.Z) > 9999 then
				continue
			end

			local dist = (pos - RootPart.Position).Magnitude
			if dist < nearestDist then
				nearestDist = dist
				nearestPlayer = player
			end
		end
	end
	return nearestPlayer
end

local lastSlapTime = 0
local slapCooldown = 1

local function updateTool()
	for _, item in pairs(Character:GetChildren()) do
		if item:IsA("Tool") then
			return item
		end
	end
	return nil
end

local function activateTool(tool)
	if tool and tool.Parent == Character then
		pcall(function()
			tool:Activate()
		end)
	end
end

local function glideToSafePosition()
	local bodyPos = Instance.new("BodyPosition")
	bodyPos.MaxForce = Vector3.new(1e6, 1e6, 1e6)
	bodyPos.P = 2e4
	bodyPos.D = 500
	bodyPos.Position = safePosition
	bodyPos.Parent = RootPart

	delay(2, function()
		bodyPos:Destroy()
	end)
end

local function onCharacterAdded(char)
	Character = char
	RootPart = char:WaitForChild("HumanoidRootPart")
	local humanoid = char:WaitForChild("Humanoid")
	humanoid.WalkSpeed = 50
	BV = Instance.new("BodyVelocity")
	BV.MaxForce = Vector3.new(1e9, 1e9, 1e9)
	BV.Velocity = Vector3.zero
	BV.Parent = RootPart
	disableFlingTimer = 3.5
	glideToSafePosition()
end

LocalPlayer.CharacterAdded:Connect(onCharacterAdded)

-- Velocity memory to predict movement
local previousTargetPosition = nil

RunService.Heartbeat:Connect(function(dt)
	if disableFlingTimer > 0 then
		disableFlingTimer = disableFlingTimer - dt
		return
	end

	if not flingEnabled then
		BV.Velocity = Vector3.zero
		return
	end

	local tool = updateTool()
	activateTool(tool)

	local targetPlayer = getNearestTarget()
	if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
		local targetRoot = targetPlayer.Character.HumanoidRootPart
		local currentPos = RootPart.Position
		local targetPos = targetRoot.Position

		-- Predict target movement
		if previousTargetPosition then
			local velocityGuess = (targetPos - previousTargetPosition) / dt
			targetPos = targetPos + velocityGuess * 0.05 -- predictive chase
		end
		previousTargetPosition = targetRoot.Position

		local offset = Vector3.new(
			math.random(-10, 10) * 0.05,
			math.random(0, 10) * 0.1,
			math.random(-10, 10) * 0.05
		)

		local desiredPos = targetPos + offset
		local direction = (desiredPos - currentPos).Unit
		local speed = 777
		BV.Velocity = direction * speed

		local dist = (desiredPos - currentPos).Magnitude
		if dist > 25 then
			RootPart.CFrame = CFrame.new(currentPos:Lerp(desiredPos, 0.8)) -- aggressive lerp
		end
		if dist > 120 then
			RootPart.CFrame = CFrame.new(desiredPos) -- instant teleport catch-up
		end

		lastSlapTime += dt
		if lastSlapTime >= slapCooldown then
			activateTool(updateTool())
			lastSlapTime = 0
		end
	else
		BV.Velocity = Vector3.zero
		lastSlapTime = 0
		previousTargetPosition = nil
	end
end)
